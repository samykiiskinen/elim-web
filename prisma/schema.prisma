// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String     @unique
  hashedPassword String
  role           UserRole
  accounts       Account[]
  sessions       Session[]
  songLists      SongList[] // Relation to SongList
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

enum UserRole {
  ADMIN
  LEADERSHIP
  WORSHIP
  BACKOFFICE
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Project {
  id            Int    @id @default(autoincrement())
  date          String
  accountNumber String
  accountName   String @db.VarChar(64)
  country       String @db.VarChar(64)
  receiver      String @db.VarChar(128)
  purpose       String @db.VarChar(512)
  decision      String @db.VarChar(64)
  income        String
  expense       String
}

model Song {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  text      String     @db.Text
  songKey   SongKey?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  songLists SongList[] @relation("SongInSongLists") // Relation to SongList
}

enum SongKey {
  C
  C_SHARP
  D_FLAT
  D
  D_SHARP
  E_FLAT
  E
  F
  F_SHARP
  G_FLAT
  G
  G_SHARP
  A_FLAT
  A
  A_SHARP
  B_FLAT
  B
}

model SongList {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  userId    String
  songs     Song[]   @relation("SongInSongLists") // Relation to Song
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
